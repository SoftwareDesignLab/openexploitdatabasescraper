version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  production_django_media: {}
  django_staticfiles: {}

services:
  nginx:
    image: nginx:1.15
    restart: unless-stopped
    depends_on:
        - django
    ports:
        # Map standard HTTP/HTTPS ports from the host
        # to the NGINX container.
        - 80:80
        - 443:443
    volumes:
        - /opt/ssl:/etc/ssl
        - ./compose/production/nginx/dcc.conf:/etc/nginx/conf.d/dcc.conf
        - django_staticfiles:/var/staticfiles
        - ./uploads:/var/mediafiles/uploads
    env_file:
      - ./.envs/.production/.nginx

    networks:
      - frontend

  django:
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: open_exploit_database_scraping_production_django
    volumes:
      - production_django_media:/app/open_exploit_database_scraping/media
      - django_staticfiles:/var/staticfiles
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

    networks:
      - backend
      - frontend

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: open_exploit_database_scraping_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

    networks:
      - backend
  
  # add redis as a message broker
  redis:
      image: "redis:alpine"
      networks:
          - celery
          - backend
          - frontend

  # celery worker process -- launches child celery processes equal to the number of available cores
  celeryworker:
    <<: *django
    image: djangoapp_celeryworker:latest
    container_name: djangoapp_celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: celery -A config.celery_app worker -l info -Q celery

  # celery worker process -- launches child celery processes equal to the number of available cores
  celerybeat:
    <<: *django
    image: oedb_local_celerybeat
    container_name: oedb_local_celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: /start-celerybeat

networks:
    frontend:
        name: djangocog_frontend
    backend:
        name: djangocog_backend
    celery:
        name: djangocog_celery

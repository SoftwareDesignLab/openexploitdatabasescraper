import json
import requests
from datetime import datetime, timedelta
from exploit_scrapers.exploit_scrapers.utils import save_exploit

def metasploit_json_to_exploit(save_all, delta=None):
    # Set source name
    source = "Metasploit"
    base_url = "https://raw.githubusercontent.com/rapid7/metasploit-framework/master"
    # Open json file with metasploit exploits.
    f = open("data/raw/vul_mentions_metasploit_metadata_base.json")
    # Load the file.
    metasploit_json = json.load(f)
    # Loop through file entries and save the exploits.
    for exploit in metasploit_json:
        # The CVE ID could be in the reference
        cve_id = exploit["reference"]
        # If the reference is instead a URL then we don't have a CVE ID.
        if "URL" in cve_id:
            cve_id = None
        # Grab the date published and the description.
        date_published = exploit["disclosure_date"]
        if date_published:
            date_published = datetime.fromisoformat(date_published).replace(tzinfo=None)
        description = exploit["description"]
        # If we have the path to the file, build the source URL.
        if exploit["path"]:
            source_url = base_url + exploit["path"]
        else:
            source_url = None
        
        # If we have a delta, check if it's within the delta to save.
        if delta and date_published:
            if date_published >= (datetime.now() - timedelta(days=int(delta))):
                # Now that we have established that we want to save this entry, request its example file from github.
                if source_url:
                    # Get the example file.
                    response = requests.get(source_url)
                    raw_file = response.content
                    # The filename is at the end of the URL
                    file_name = source_url.split('/')[-1]
                # Send the data to the save_exploit function to be assembled and put into an Exploit model.
                save_exploit(source, exploit["reference"], False, save_all, source_url=source_url, cve_id=cve_id, description=description, date_published=date_published, file_name=file_name, file_content=raw_file)
        # If we have a delta but not the disclosure date, then skip the entry.
        elif delta and (date_published is None):
            continue
        # If we don't have a delta then use every entry.
        else:
            # Now that we have established that we want to save this entry, request its example file from github.
            if source_url:
                # Get the example file.
                response = requests.get(source_url)
                raw_file = response.content
                # The filename is at the end of the URL
                file_name = source_url.split('/')[-1]
            # Send the data to the save_exploit function to be assembled and put into an Exploit model.
            save_exploit(source, exploit["reference"], False, save_all, source_url=source_url, cve_id=cve_id, description=description, date_published=date_published, file_name=file_name, file_content=raw_file)

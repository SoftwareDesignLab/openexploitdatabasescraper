from open_exploit_database_scraping.exploit.models import Exploit
from django.core.management.base import BaseCommand
from scrapy.crawler import CrawlerProcess


class Command(BaseCommand):
    help = "Will go through existing CXSecurity and ExploitDB exploit entries and generate the source url for each entry."

    def add_arguments(self, parser):
        # Add run flags for the two sources that can have their source urls generated from existing entries.
        parser.add_argument("-e", "--exploitdb", action="store_true", help="A no-run flag for ExploitDB source URL generating.")
        parser.add_argument("-c", "--cxsecurity", action="store_true", help="A no-run flag for CXSecurity source URL generating.")

    def handle(self, *args, **kwargs):
        n_updated = 0
        if kwargs["exploitdb"] is not True:
            # ExploitDB's base URL for exploits.
            # NOTE: While the source URL points to an exploit from ExploitDB's website, 
            #       the exploit was actually scraped for ExploitDB's gitlab repo.
            base_url = "https://www.exploit-db.com/exploits/"
            for exploit in Exploit.objects.filter(source="ExploitDB"):
                if exploit.source_url is None:
                    # Grab the exploit's id (name).
                    exploit_id = exploit.name
                    # We just want the id part of the name, not the file extension.
                    exploit_id = exploit_id.split('.')[0] # "example.txt" -> ["example", "txt"]
                    # Assemble source url and save it to the model.
                    exploit.source_url = base_url + exploit_id
                    exploit.save()
                    n_updated += 1
        if kwargs["cxsecurity"] is not True:
            # CXsecurity's base url for an exploit's details.
            base_url = "https://cxsecurity.com/issue/"
            for exploit in Exploit.objects.filter(source="CXSecurity"):
                if exploit.source_url is None:
                    # Grab the exploit's id (name).
                    exploit_id = exploit.example_file.name
                    # We just want the id part of the name, not the file extension.
                    exploit_id = exploit_id.split('.')[0] # "example.txt" -> ["example", "txt"]
                    # Assemble source url and save it to the model.
                    exploit.source_url = base_url + exploit_id
                    exploit.save()
                    n_updated += 1

        if(kwargs["exploitdb"] and kwargs["cxsecurity"]):
            print("\n[WARNING] Both sources were flagged for no run.")

        print(f"\n[INFO] {n_updated} exploits were updated with a source URL.")
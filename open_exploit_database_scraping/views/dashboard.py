"""Home view."""
import datetime
from django.views.generic import TemplateView
from django.db.models import Count
from django.db.models.functions import TruncMonth
from django.db.models import Q  

from ..exploit.models import Exploit


class DashboardTemplateView(TemplateView):
    """Hometemplate view."""

    template_name = "pages/dashboard.html"

    def get_context_data(self, **kwargs):
        Color = ["progress-bar bg-success", "progress-bar bg-info text-dark", "progress-bar bg-warning text-dark", "progress-bar bg-danger" ]
        """Get context data."""
        # Call the base implementation first to get a context
        
        context = super().get_context_data(**kwargs)
        context["exploits_count"] = Exploit.objects.all().count()

        date_from = datetime.datetime.now() - datetime.timedelta(days=1)
        context["24_hours"] = Exploit.objects.filter(date_created__gte=date_from).count()

        date_from = datetime.datetime.now() - datetime.timedelta(days=7)
        context["7_days"] = Exploit.objects.filter(date_created__gte=date_from).count()
        sources = Exploit.objects.values('source').annotate(count=Count('source')).order_by()
        color = 0
        for source in sources:
            source['percentage'] = format(source['count'] / context["exploits_count"] * 100, '.2f')
            if color > 3:
                color = 0
            source['color'] = Color[color]
            color += 1

        context["sources"] = sources

        data_sets = Exploit.objects.filter(Q(date_created__year=datetime.datetime.now().date().year)).values('source').annotate(month=TruncMonth('date_created')).values('month').annotate(c=Count('id')).values('month', 'c', 'source').order_by('source')
        options = Exploit.objects.order_by().values('source').distinct()
        print(data_sets)
        
        data_set =  [0] * (datetime.datetime.now().month)

        graph_data = []
        for option in options:
            for data in data_sets:
                if data['source'] == option['source']:
                    if data['month'] is not None:
                        data_set[data['month'].month-1] = data['c']

            graph_data.append({"name": option['source'], "data": data_set})
            data_set =  [0] * (datetime.datetime.now().month )


        # oldest_date = Exploit.objects.order_by('date_published').values('date_published').first()
        current_date = datetime.datetime.now()
        # year = oldest_date['date_published'].year
        context["years"] = [2022, 2023]
        context["year"] = current_date.year
        
        context["data"] = graph_data

        # Add failure to download count to context
        context["download_failures"] = Exploit.objects.filter(Q(download_failed=True)).count()
      
        return context
    




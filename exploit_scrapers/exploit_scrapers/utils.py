from open_exploit_database_scraping.exploit.models import Exploit
from django.core.files.base import ContentFile

def save_exploit(
    source, name, is_repo, save_all, source_url=None, cve_id=None, date_published=None,author=None, 
    description=None, download_failed=False, file_name=None, file_content=None, vendor=None, 
    product=None, vul_type=None, risk=None, pub_dates=None, version=None
    ):
    """Function takes in the parameters needed to create and save an exploit mode. Will not save duplicates.

    :param source: The source name of this exploit. Ex.: GitHub, CXSecurity, ...
    :type source: str
    :param name: The name of the exploit.
    :type name: str
    :param is_repo: Boolean field indicating if the exploit is a repo archive file.
    :type is_repo: bool
    :param save_all: Boolean field indicating to save all exploits (True) or only ones with a CVE ID (False).
    :type save_all: bool
    :param source_url: The URL of the exploit.
    :type source_url: str
    :param cve_id: The CVE ID of the exploit.
    :type cve_id: str
    :param date_published: The datetime object of when the the exploit was published or uploaded, defaults to None.
    :type date_published: datetime.datetime, optional
    :param author: The author or uploader of the exploit, defaults to None.
    :type author: str, optional
    :param description: A short description of the exploit, defaults to None.
    :type description: str, optional
    :param download_failed: Boolean value indicating if a failure to download the example exploit file occured, defaults to False.
    :type download_failed: bool, optional
    :param file_name: The name of the file, defaults to None.
    :type file_name: str, optional
    :param file_content: The content to be in the file.
    :type file_content: str, optional
    :param vendor: The vendor of the exploit.
    :type vendor: str, optional
    :param product: Product info.
    :type product: str, optional
    :param vul_type: The vulnerability type.
    :type vul_type: str, optional
    :param risk: The risk level of the exploit.
    :type risk: str, optional
    :param pub_dates: The publish dates of the exploit.
    :type pub_dates: str, optional
    :param version: The version of the exploit.
    :type version: str, optional
    """
    # If we are to save all scraped exploits...
    if save_all:
        exploit, is_created = Exploit.objects.get_or_create(
            source=source, name=name, source_url=source_url, cve_id=cve_id, date_published=date_published, author=author, 
            description=description, is_repo=is_repo, download_failed=download_failed, vendor=vendor, product=product, 
            vul_type=vul_type, risk=risk, pub_dates=pub_dates, version=version
            )
        if is_created:
            # If we created a new model ...
            if file_name is not None:
                # If we have a file to save, save it
                exploit.example_file.save(file_name.replace('/', '_'), ContentFile(file_content))
            # Save model.
            exploit.save()
            return
    # Only save exploits if they have a CVE ID.
    elif cve_id:
        exploit, is_created = Exploit.objects.get_or_create(
            source=source, name=name, source_url=source_url, cve_id=cve_id, date_published=date_published, author=author, 
            description=description, is_repo=is_repo, download_failed=download_failed, vendor=vendor, product=product, 
            vul_type=vul_type, risk=risk, pub_dates=pub_dates, version=version
            )
        if is_created:
            # If we created a new model ...
            if file_name is not None:
                # If we have a file to save, save it
                exploit.example_file.save(file_name.replace('/', '_'), ContentFile(file_content))
            # Save model.
            exploit.save()
            return